@model IEnumerable<NguyenLeHoangMVC_DataLayer.Models.SystemAccount>

@{
    ViewData["Title"] = "Account Management";
}

<h2>Account Management</h2>

<form asp-action="AccountManagement" method="get">
    <input type="text" name="searchString" placeholder="Search by Name or Email..." value="@ViewBag.CurrentFilter" />
    <button type="submit" class="btn btn-primary">Search</button>
    <a asp-action="AccountManagement" class="btn btn-secondary" style="margin-left: 10px; padding: 5px 10px;">Clear</a>
</form>

@if (Model != null && Model.Any()) {
    <table style="border-collapse: collapse; width: 100%; margin-top: 20px;">
        <thead>
            <tr style="background-color: #f2f2f2;">
                <th style="border: 1px solid #ddd; padding: 8px;">ID</th>
                <th style="border: 1px solid #ddd; padding: 8px;">Name</th>
                <th style="border: 1px solid #ddd; padding: 8px;">Email</th>
                <th style="border: 1px solid #ddd; padding: 8px;">Role</th>
                <th style="border: 1px solid #ddd; padding: 8px;">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var acc in Model) {
                <tr>
                    <td style="border: 1px solid #ddd; padding: 8px;">@acc.AccountId</td>
                    <td style="border: 1px solid #ddd; padding: 8px;">@acc.AccountName</td>
                    <td style="border: 1px solid #ddd; padding: 8px;">@acc.AccountEmail</td>
                    <td style="border: 1px solid #ddd; padding: 8px;">
                        @acc.AccountRole (@(ViewBag.RoleNames != null ? ViewBag.RoleNames[acc.AccountRole ?? 0] : "Unknown"))
                    </td>
                    <td style="border: 1px solid #ddd; padding: 8px;">
                        <button onclick="openUpdateModal(@acc.AccountId)" style="color:blue; border: none; background: none; cursor: pointer; text-decoration: underline;">
                            Update
                        </button> |
                        <button onclick="confirmDelete(@acc.AccountId)" style="color:red; border: none; background: none; cursor: pointer; text-decoration: underline;">
                            Delete
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <button onclick="openCreateModal()" style="margin-top: 10px; padding: 5px 10px; background-color: #007bff; color: white; border: none; cursor: pointer;">
        Create New
    </button>
} else {
    <p>No accounts found.</p>
}

<a asp-controller="Home" asp-action="Index" style="margin-top: 10px; display: inline-block; padding: 5px 10px; background-color: #6c757d; color: white; text-decoration: none;">
    Back to Home
</a>

@section Scripts {
    <script>
        // swal: success/error toast
        @if (TempData["Success"] != null) {
                    <text>
                        Swal.fire({
                            icon: 'success',
                            title: 'Success!',
                            text: '@TempData["Success"]',
                            toast: true,
                            position: 'top-end',
                            showConfirmButton: false,
                            timer: 3000,
                            timerProgressBar: true
                        });
                    </text>
        }
        @if (TempData["Error"] != null) {
                    <text>
                        Swal.fire({
                            icon: 'error',
                            title: 'Error!',
                            text: '@TempData["Error"]',
                            toast: true,
                            position: 'top-end',
                            showConfirmButton: false,
                            timer: 3000,
                            timerProgressBar: true
                        });
                    </text>
        }

        // swal: popup modal for create
        function openCreateModal() {
            Swal.fire({
                title: 'Create New Account',
                html: `
                    <form id="createForm">
                        <div class="form-group" style="margin-bottom: 15px;">
                            <label>Name</label>
                            <input type="text" name="AccountName" class="swal2-input" required />
                        </div>
                        <div class="form-group" style="margin-bottom: 15px;">
                            <label>Email</label>
                            <input type="email" name="AccountEmail" class="swal2-input" required />
                        </div>
                        <div class="form-group" style="margin-bottom: 15px;">
                            <label>Password <span onclick="togglePassword('createPassword')" style="cursor: pointer; color: #007bff; font-size: 12px;">👁</span></label>  <!-- CHANGE: Thêm toggle show/hide password (eye icon). -->
                            <input type="password" id="createPassword" name="AccountPassword" class="swal2-input" required />
                        </div>
                        <div class="form-group" style="margin-bottom: 15px;">
                            <label>Role</label>
                            <select name="AccountRole" class="swal2-select" required>
                                <option value="">Select Role</option>
                                <option value="1">Staff</option>
                                <option value="2">Lecturer</option>
                            </select>
                        </div>
                    </form>
                `,
                focusConfirm: false,
                showCancelButton: true,
                confirmButtonText: 'Create',
                cancelButtonText: 'Cancel',
                preConfirm: () => {
                    const form = document.getElementById('createForm');
                    const password = document.getElementById('createPassword').value;
                    if (!password || password.trim() === '') {  // CHANGE: JS check password not empty (required).
                        Swal.showValidationMessage('Password is required and cannot be empty!');
                        return false;
                    }
                    const formData = new FormData(form);
                    if (!form.checkValidity()) {
                        form.reportValidity();
                        return false;
                    }
                    return fetch('/Account/Create', {
                        method: 'POST',
                        body: formData
                    }).then(response => {
                        if (!response.ok) {
                            return response.text().then(text => { throw new Error(text); });  // CHANGE: Parse error HTML nếu 500, fix syntax '<'.
                        }
                        return response.json();
                    }).catch(error => {
                        Swal.showValidationMessage(`Request failed: ${error}`);
                    });
                }
            }).then((result) => {
                if (result.isConfirmed && result.value.success) {
                    location.reload();  // Reload page sau success (toast show từ Layout).
                }
            });
        }

        // swal: popup modal for update
        function openUpdateModal(id) {
            fetch('/Account/GetAccountJson/' + id)  // CHANGE: Fetch JSON từ action mới.
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to load account data');
                    }
                    return response.json();
                })
                .then(data => {
                    Swal.fire({
                        title: 'Update Account',
                        html: `
                            <form id="updateForm">
                                <input type="hidden" name="AccountId" value="${data.accountId}" />
                                <div class="form-group" style="margin-bottom: 15px;">
                                    <label>Name</label>
                                    <input type="text" name="AccountName" class="swal2-input" value="${data.accountName || ''}" required />
                                </div>
                                <div class="form-group" style="margin-bottom: 15px;">
                                    <label>Email</label>
                                    <input type="email" name="AccountEmail" class="swal2-input" value="${data.accountEmail || ''}" required />
                                </div>
                                <div class="form-group" style="margin-bottom: 15px;">
                                    <label>Password <span onclick="togglePassword('updatePassword')" style="cursor: pointer; color: #007bff; font-size: 12px;">👁</span></label>  <!-- CHANGE: Thêm toggle show/hide password (eye icon). -->
                                    <input type="password" id="updatePassword" name="AccountPassword" class="swal2-input" value="${data.accountPassword || ''}" />  <!-- CHANGE: Populate password old từ data.accountPassword (plain text DB). -->
                                </div>
                                <div class="form-group" style="margin-bottom: 15px;">
                                    <label>Role</label>
                                    <select name="AccountRole" class="swal2-select" required>
                                        <option value="">Select Role</option>
                                        <option value="1" ${data.accountRole == 1 ? 'selected' : ''}>Staff</option>
                                        <option value="2" ${data.accountRole == 2 ? 'selected' : ''}>Lecturer</option>
                                    </select>
                                </div>
                            </form>
                        `,
                        focusConfirm: false,
                        showCancelButton: true,
                        confirmButtonText: 'Update',
                        cancelButtonText: 'Cancel',
                        preConfirm: () => {
                            const form = document.getElementById('updateForm');
                            const password = document.getElementById('updatePassword').value;
                            if (password.trim() === '') {  // CHANGE: JS check password not empty (required, even if old password shown).
                                Swal.showValidationMessage('Password cannot be empty!');
                                return false;
                            }
                            const formData = new FormData(form);
                            if (!form.checkValidity()) {
                                form.reportValidity();
                                return false;
                            }
                            return fetch('/Account/Update/' + id, {
                                method: 'POST',
                                body: formData
                            }).then(response => {
                                if (!response.ok) {
                                    return response.text().then(text => { throw new Error(text); });  // CHANGE: Parse error HTML nếu 500, fix syntax '<'.
                                }
                                return response.json();
                            }).catch(error => {
                                Swal.showValidationMessage(`Request failed: ${error}`);
                            });
                        }
                    }).then((result) => {
                        if (result.isConfirmed && result.value.success) {
                            location.reload();  // Reload page sau success (toast show từ Layout).
                        }
                    });
                }).catch(error => {
                    Swal.fire('Error!', 'Failed to load account data: ' + error.message, 'error');
                });
        }

        // swal: popup modal for delete
        function confirmDelete(id) {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch('/Account/Delete/' + id, {
                        method: 'POST'
                    }).then(response => {
                        if (response.ok) {
                            return response.json();  // parse json success
                        } else {
                            return response.text().then(text => { throw new Error(text); });  // parse err if 500
                        }
                    }).then(data => {
                        if (data.success) {
                            location.reload();  // reload after success
                        } else {
                            Swal.fire('Error!', data.error || 'Delete failed.', 'error');
                        }
                    }).catch(error => {
                        Swal.fire('Error!', 'Delete failed: ' + error.message, 'error');
                    });
                }
            });
        }

        // function togglePassword(fieldId) {
        //     const passwordField = document.getElementById(fieldId);
        //     const type = passwordField.getAttribute('type') === 'password' ? 'text' : 'password';
        //     passwordField.setAttribute('type', type);
        // }

        function togglePassword(fieldId) {
            const passwordField = document.getElementById(fieldId);
            const type = passwordField.getAttribute('type') === 'password' ? 'text' : 'password';
            passwordField.setAttribute('type', type);
            // CHANGE: Toggle eye icon (👁 → 👁‍🗨 nếu show, tùy ý).
            const eye = passwordField.parentElement.querySelector('span[onclick="togglePassword(\'' + fieldId + '\')"]');
            eye.textContent = type === 'password' ? '👁' : '👁‍🗨';
        }
    </script>
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}